m_dag_factory_yaml:
  default_args:
    owner: 'example_owner'
    start_date: 2018-01-01  # or '2 days'
    end_date: 2018-01-05
    retries: 1
    retry_delay_sec: 300
  schedule_interval: '0 3 * * *'
  concurrency: 1
  max_active_runs: 1
  dagrun_timeout_sec: 60
  default_view: 'tree'  # or 'graph', 'duration', 'gantt', 'landing_times'
  orientation: 'LR'  # or 'TB', 'RL', 'BT'
  description: 'this is an example dag!'
  #on_success_callback_name: print_hello
  #on_success_callback_file: /usr/local/airflow/dags/print_hello.py
  #on_failure_callback_name: print_hello
  #on_failure_callback_file: /usr/local/airflow/dags/print_hello.py
  tasks:
    task_1:
      operator: airflow.operators.bash_operator.BashOperator
      bash_command: 'echo 1'
    task_2:
      operator: airflow.operators.bash_operator.BashOperator
      bash_command: 'echo 2'
      dependencies: [task_1]
    task_3:
      operator: airflow.operators.bash_operator.BashOperator
      bash_command: 'echo 3'
      dependencies: [task_1]
    #task_4:
    #  operator: airflow.sensors.http_sensor.HttpSensor
    #  http_conn_id: 'test-http'
    #  method: 'GET'
    #  response_check_name: check_sensor
    #  response_check_file: /path/to/example1/http_conn.py
    #  dependencies: [task_1]
    http_get_request:
      operator: airflow.sensors.http_sensor.HttpSensor
      http_conn_id: 'http_default'
      method: 'GET'
      endpoint: ''
      response_check_lambda: 'lambda response: 200 == response.status_code'
      dependencies: [task_1]
